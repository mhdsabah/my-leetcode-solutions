class MergeSort { 
    // Merges two subarrays of arr[]. 
    // First subarray is arr[l..m] 
    // Second subarray is arr[m+1..r] 
    void merge(int arr[], int l, int m, int r) 
    { 
        // Find sizes of two subarrays to be merged 
        int n1 = m - l + 1; 
        int n2 = r - m; 
  
        /* Create temp arrays */
        int L[] = new int[n1]; 
        int R[] = new int[n2]; 
  
        /*Copy data to temp arrays*/
        for (int i = 0; i < n1; ++i) 
            L[i] = arr[l + i]; 
        for (int j = 0; j < n2; ++j) 
            R[j] = arr[m + 1 + j]; 
  
        /* Merge the temp arrays */
  
        // Initial indexes of first and second subarrays 
        int i = 0, j = 0; 
  
        // Initial index of merged subarry array 
        int k = l; 
        while (i < n1 && j < n2) { 
            if (L[i] <= R[j]) { 
                arr[k] = L[i]; 
                i++; 
            } 
            else { 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
  
        /* Copy remaining elements of L[] if any */
        while (i < n1) { 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
  
        /* Copy remaining elements of R[] if any */
        while (j < n2) { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
    } 
  
    // Main function that sorts arr[l..r] using 
    // merge() 
    void sort(int arr[], int l, int r) 
    { 
        if (l < r) { 
            // Find the middle point 
            int m = (l + r) / 2; 
  
            // Sort first and second halves 
            sort(arr, l, m); 
            sort(arr, m + 1, r); 
  
            // Merge the sorted halves 
            merge(arr, l, m, r); 
        } 
    } 

}


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int k1 = nums1.length;
        //System.out.println(k1);
        int k2 = nums2.length;
   
          int l2 = k1+k2;
            int[] ar;
            ar = new int[l2];
            for (int i=0;i<k1;i++)
            {
                ar[i] = nums1[i];
            }
            for (int j=k1;j<l2;j++)
            {
                ar[j] = nums2[j-k1];
            }
   
        
         MergeSort ob = new MergeSort(); 
        ob.sort(ar, 0, ar.length - 1);
     
        double med =0 ;
        
        if (l2%2 == 0)
        {
           
                double x1 = ar[(l2/2)-1];
                
                double x2 = ar[(l2/2)];
                
                med = (x1+x2)/2;
                
                
            
        }
        else 
        {
                 int x = ar[((l2+1)/2)-1];
                
                 med = x;
                 
            
        }
            return med;
               
            
  }
}